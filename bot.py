# -*- coding: utf-8 -*-
import logging
import time
import math
import re
from typing import List, Tuple, Optional, Dict

# Aiogram imports
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder

# APScheduler imports
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.memory import MemoryJobStore

# Database import
from bot_db import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏–∑ app.py) ---
API_TOKEN = ""
WEBHOOK_URL = ""
TARGET_CHAT_ID = 0 

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
DB_NAME = 'bot.db'
db = Database(DB_NAME)
scheduler = AsyncIOScheduler(jobstores={'default': MemoryJobStore()})

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (parse_mode —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage(), parse_mode=ParseMode.HTML)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Elo ---
DEFAULT_RATING = 1000

def calculate_k_factor(r1: int, r2: int) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç K-—Ñ–∞–∫—Ç–æ—Ä –ø–æ —Ñ–æ—Ä–º—É–ª–µ: K = 15 + |R1 - R2| / 100"""
    diff = abs(r1 - r2)
    return 15.0 + diff / 100.0

def calculate_elo_change(rating_winner: int, rating_loser: int) -> int:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ Elo.
    :param rating_winner: –†–µ–π—Ç–∏–Ω–≥ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.
    :param rating_loser: –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ.
    :return: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ (delta R).
    """
    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (Ea)
    expected_score_winner = 1.0 / (1.0 + 10.0 ** ((rating_loser - rating_winner) / 400.0))
    
    k = calculate_k_factor(rating_winner, rating_loser)
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ (Delta R)
    delta_r = k * (1.0 - expected_score_winner)
    
    return int(round(delta_r))

# --- –•–µ–ª–ø–µ—Ä—ã ---

def format_match_description(winner_ids: List[int], loser_ids: List[int], score: str, match_type: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    if match_type == '1vs1':
        winner_tag = f"@{bot.get_my_username()}" # –ó–∞–≥–ª—É—à–∫–∞, –ø–æ–∑–∂–µ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π username
        loser_tag = f"@{bot.get_my_username()}" # –ó–∞–≥–ª—É—à–∫–∞
        return (
            f"üéæ <b>–û–¥–∏–Ω–æ—á–Ω—ã–π –º–∞—Ç—á (1v1)</b>\n"
            f"ü•á –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @winner_tag\n"
            f"ü•à –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: @loser_tag\n"
            f"üìä –°—á–µ—Ç: {score}"
        )
    elif match_type == '2vs2':
        winners_tags = [f"@{bot.get_my_username()}"] * len(winner_ids) # –ó–∞–≥–ª—É—à–∫–∞
        losers_tags = [f"@{bot.get_my_username()}"] * len(loser_ids) # –ó–∞–≥–ª—É—à–∫–∞
        return (
            f"üèì <b>–ü–∞—Ä–Ω—ã–π –º–∞—Ç—á (2v2)</b>\n"
            f"ü•á –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {', '.join(winners_tags)}\n"
            f"ü•à –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ: {', '.join(losers_tags)}\n"
            f"üìä –°—á–µ—Ç: {score}"
        )
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–∞—Ç—á–∞."

async def resolve_usernames(user_ids: List[int]) -> List[str]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤ —Å–ø–∏—Å–æ–∫ @usernames –∏–ª–∏ –ø–æ–ª–Ω—ã—Ö –∏–º–µ–Ω."""
    resolved_names = []
    for user_id in user_ids:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
            member = await bot.get_chat_member(TARGET_CHAT_ID, user_id)
            username = member.user.username
            full_name = member.user.full_name
            
            if username:
                resolved_names.append(f"@{username}")
            else:
                resolved_names.append(f"<b>{full_name}</b>")
        except Exception:
            resolved_names.append(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫ ({user_id})")
    return resolved_names

async def update_player_info(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏–≥—Ä–æ–∫–∞ –≤ –ë–î."""
    try:
        member = await bot.get_chat_member(TARGET_CHAT_ID, user_id)
        username = member.user.username if member.user.username else str(user_id)
        full_name = member.user.full_name
        db.get_or_create_player(user_id, username, full_name)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞ {user_id}: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ ---

@dp.message(F.text.startswith('/new_result'))
async def handle_new_result_command(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /new_result_1vs1 –∏ /new_result_2vs2."""
    if message.chat.type not in ['group', 'supergroup']:
        await message.reply("–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return

    global TARGET_CHAT_ID
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–µ
    if TARGET_CHAT_ID == 0:
        TARGET_CHAT_ID = message.chat.id
        logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TARGET_CHAT_ID: {TARGET_CHAT_ID}")

    parts = message.text.split()
    if len(parts) < 4:
        await message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>/new_result_1vs1 @–ø–æ–±–µ–¥–∏—Ç–µ–ª—å @–ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π 11-9</code>\n"
            "–∏–ª–∏ –¥–ª—è 2v2:\n"
            "<code>/new_result_2vs2 @–ø–æ–±1 @–ø–æ–±2 @–ø—Ä–æ–∏–≥1 @–ø—Ä–æ–∏–≥2 11-9</code>"
        )
        return

    command = parts[0]
    score = parts[-1]
    tags = [t.lstrip('@') for t in parts[1:-1]]
    
    match_type = '1vs1' if command.endswith('1vs1') else '2vs2'

    if match_type == '1vs1' and len(tags) != 2:
        await message.reply("–î–ª—è 1v1 –Ω—É–∂–Ω–æ 2 –∏–≥—Ä–æ–∫–∞: @–ø–æ–±–µ–¥–∏—Ç–µ–ª—å @–ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π.")
        return
    
    if match_type == '2vs2' and len(tags) != 4:
        await message.reply("–î–ª—è 2v2 –Ω—É–∂–Ω–æ 4 –∏–≥—Ä–æ–∫–∞: @–ø–æ–±1 @–ø–æ–±2 @–ø—Ä–æ–∏–≥1 @–ø—Ä–æ–∏–≥2.")
        return

    # 1. –ü–æ–ª—É—á–∞–µ–º ID –∏–≥—Ä–æ–∫–æ–≤
    # –í 1vs1: tags[0]=winner, tags[1]=loser
    # –í 2vs2: tags[0], tags[1]=winners, tags[2], tags[3]=losers
    
    all_tags = set(tags)
    user_ids: Dict[str, int] = {}
    
    for tag in all_tags:
        user_id = db.get_user_id_by_tag(tag)
        if user_id is None:
            await message.reply(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å @{tag}. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.")
            return
        user_ids[tag] = user_id

    # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    if match_type == '1vs1':
        winner_tags = tags[:1]
        loser_tags = tags[1:2]
    else: # 2vs2
        winner_tags = tags[:2]
        loser_tags = tags[2:]

    winner_ids = [user_ids[tag] for tag in winner_tags]
    loser_ids = [user_ids[tag] for tag in loser_tags]
    participants_ids = winner_ids + loser_ids

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if len(set(participants_ids)) != len(participants_ids):
        await message.reply("–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–∞—Ç—á–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏.")
        return

    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ pending
    pending_id = db.add_pending_match(
        match_type, 
        participants_ids, 
        winner_ids, 
        loser_ids, 
        score
    )

    # 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –æ—Ç–º–µ–Ω—É (2 —á–∞—Å–∞)
    scheduler.add_job(
        delete_pending_match_job, 
        'date', 
        run_date=time.time() + 2 * 3600, # 2 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        args=[pending_id, message.chat.id, message.message_id]
    )

    # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    winner_names = await resolve_usernames(winner_ids)
    loser_names = await resolve_usernames(loser_ids)
    
    description = (
        f"üéæ <b>–ú–∞—Ç—á ({match_type})</b>\n"
        f"ü•á –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {', '.join(winner_names)}\n"
        f"ü•à –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ: {', '.join(loser_names)}\n"
        f"üìä –°—á–µ—Ç: {score}\n\n"
        f"‚ùóÔ∏è **–û–ñ–ò–î–ê–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø** ‚ùóÔ∏è"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", 
        callback_data=f"confirm_{pending_id}"
    )
    
    await message.reply(description, reply_markup=builder.as_markup())


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback Query (–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ) ---

@dp.callback_query(F.data.startswith('confirm_'))
async def process_match_confirmation(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    match_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id

    pending_match_data = db.get_pending_match(match_id)
    
    if not pending_match_data:
        await callback.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await callback.message.delete_reply_markup()
        return

    match_type, winner_ids_str, loser_ids_str, score = pending_match_data
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ ID –≤ —Å–ø–∏—Å–∫–∏ int
    winner_ids = [int(i) for i in winner_ids_str.split(',')]
    loser_ids = [int(i) for i in loser_ids_str.split(',')]
    
    participants = winner_ids + loser_ids

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∂–∞–≤—à–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –º–∞—Ç—á–∞
    if user_id not in participants:
        await callback.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫ –º–∞—Ç—á–∞.")
        return

    # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –ø–µ—Ä–µ—Å—á–µ—Ç Elo ---

    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
    winner_ratings = [db.get_player_rating(uid) for uid in winner_ids]
    loser_ratings = [db.get_player_rating(uid) for uid in loser_ids]
    
    # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥
    avg_winner_rating = sum(winner_ratings) / len(winner_ratings)
    avg_loser_rating = sum(loser_ratings) / len(loser_ratings)
    
    # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
    delta_r = calculate_elo_change(int(avg_winner_rating), int(avg_loser_rating))
    
    # 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    # –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: –ø–æ–ª—É—á–∞—é—Ç delta_r
    for uid in winner_ids:
        db.update_player_rating(uid, delta_r)
        
    # –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ: —Ç–µ—Ä—è—é—Ç delta_r
    for uid in loser_ids:
        db.update_player_rating(uid, -delta_r)

    # 4. –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞
    db.finalize_match(match_id, winner_ids, loser_ids, score, match_type)
    
    # 5. –û–ø–æ–≤–µ—â–µ–Ω–∏–µ
    winner_names = await resolve_usernames(winner_ids)
    loser_names = await resolve_usernames(loser_ids)
    
    notification = (
        f"‚úÖ <b>–ú–ê–¢–ß –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!</b> (ID: {match_id})\n"
        f"ü•á –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {', '.join(winner_names)} (<b>+{delta_r}</b>)\n"
        f"ü•à –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ: {', '.join(loser_names)} (<b>{-delta_r}</b>)\n"
        f"üìä –°—á–µ—Ç: {score}\n"
    )

    await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω!")
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.delete_reply_markup()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await bot.send_message(callback.message.chat.id, notification)


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---

@dp.message(F.text == '/start')
async def handle_start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞."""
    global TARGET_CHAT_ID
    if message.chat.type not in ['group', 'supergroup']:
        await message.reply("–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞
    if TARGET_CHAT_ID == 0:
        TARGET_CHAT_ID = message.chat.id
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å TARGET_CHAT_ID –≤ .env –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª—Å—è

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    await update_player_info(message.from_user.id)

    welcome_message = (
        f"üéæ **–ë–æ—Ç –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞**\n"
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Å—Ç–∏ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ Elo.\n\n"
        f"**–ö–æ–º–∞–Ω–¥—ã:**\n"
        f"<code>/new_result_1vs1 @–ø–æ–± @–ø—Ä–æ–∏–≥ —Å—á–µ—Ç</code> - –î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π –º–∞—Ç—á\n"
        f"<code>/new_result_2vs2 @–ø1 @–ø2 @–ø—Ä1 @–ø—Ä2 —Å—á–µ—Ç</code> - –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–Ω—ã–π –º–∞—Ç—á\n"
        f"<code>/leaderboard</code> - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥\n"
        f"<code>/stats @user</code> - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞\n"
        f"<code>/history</code> - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏"
    )
    await message.reply(welcome_message)


# --- –ö–æ–º–∞–Ω–¥–∞ /leaderboard ---

@dp.message(F.text == '/leaderboard')
async def handle_leaderboard(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤."""
    leaderboard = db.get_leaderboard()
    
    if not leaderboard:
        await message.reply("–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á!")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    response = "üèÜ **–¢–ê–ë–õ–ò–¶–ê –õ–ò–î–ï–†–û–í ELO** üèÜ\n\n"
    
    for i, (username, rating, wins, losses) in enumerate(leaderboard):
        emoji = {0: "ü•á", 1: "ü•à", 2: "ü•â"}.get(i, "‚ñ™Ô∏è")
        response += (
            f"{emoji} <b>{username}</b> (<code>{rating}</code>)\n"
            f"   –í: {wins} | –ü: {losses}\n"
        )

    await message.reply(response)


# --- –ö–æ–º–∞–Ω–¥–∞ /stats ---

@dp.message(F.text.startswith('/stats'))
async def handle_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    parts = message.text.split()
    target_tag = None
    
    if len(parts) == 2:
        target_tag = parts[1].lstrip('@')
    
    if not target_tag:
        # –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await update_player_info(message.from_user.id) # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        user_id = message.from_user.id
    else:
        user_id = db.get_user_id_by_tag(target_tag)
        
    if user_id is None:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start.")
        return

    stats = db.get_player_stats(user_id)
    
    if not stats:
        await message.reply("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    username, rating, wins, losses = stats
    
    response = (
        f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†–û–ö–ê**\n"
        f"üë§ –ò–º—è: <b>{username}</b>\n"
        f"‚ö°Ô∏è –†–µ–π—Ç–∏–Ω–≥ Elo: <code>{rating}</code>\n"
        f"‚úÖ –ü–æ–±–µ–¥—ã: {wins}\n"
        f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {losses}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {wins / (wins + losses) * 100:.1f}%" if (wins + losses) > 0 else "üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: N/A"
    )
    await message.reply(response)


# --- –ö–æ–º–∞–Ω–¥–∞ /history ---

@dp.message(F.text == '/history')
async def handle_history(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∞—Ç—á–µ–π."""
    history = db.get_match_history(limit=10)

    if not history:
        await message.reply("–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –ø—É—Å—Ç–∞.")
        return
        
    response = "üìú **–ü–û–°–õ–ï–î–ù–ò–ï 10 –ú–ê–¢–ß–ï–ô** üìú\n\n"

    for match_id, match_type, winner_ids_str, loser_ids_str, score, timestamp in history:
        winner_ids = [int(i) for i in winner_ids_str.split(',')]
        loser_ids = [int(i) for i in loser_ids_str.split(',')]
        
        winner_names = await resolve_usernames(winner_ids)
        loser_names = await resolve_usernames(loser_ids)
        
        date_str = time.strftime("%d.%m.%Y %H:%M", time.localtime(timestamp))
        
        response += (
            f"#{match_id} ({date_str})\n"
            f"   –¢–∏–ø: {match_type}\n"
            f"   –ü–æ–±–µ–¥–∏–ª–∏: {', '.join(winner_names)}\n"
            f"   –ü—Ä–æ–∏–≥—Ä–∞–ª–∏: {', '.join(loser_names)}\n"
            f"   –°—á–µ—Ç: <b>{score}</b>\n\n"
        )
        
    await message.reply(response)


# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /delete_match (–¥–ª—è –∞–¥–º–∏–Ω–∞) ---

@dp.message(F.text.startswith('/delete_match'))
async def handle_delete_match(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –º–∞—Ç—á –ø–æ ID –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ —á–∞—Ç–∞)."""
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    try:
        chat_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        if chat_member.status not in ['administrator', 'creator']:
            await message.reply("–£–¥–∞–ª—è—Ç—å –º–∞—Ç—á–∏ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞.")
            return
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/delete_match ID_–ú–ê–¢–ß–ê</code>")
        return

    match_id = int(parts[1])
    
    if db.delete_match_by_id(match_id):
        await message.reply(f"‚ùå –ú–∞—Ç—á #{match_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.")
    else:
        await message.reply(f"–ú–∞—Ç—á #{match_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# --- –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (APScheduler) ---

async def delete_pending_match_job(match_id: int, chat_id: int, original_message_id: int):
    """–ó–∞–¥–∞—á–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: —É–¥–∞–ª—è–µ—Ç –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞."""
    pending_match_data = db.get_pending_match(match_id)
    
    if pending_match_data:
        db.delete_pending_match(match_id)
        
        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        await bot.send_message(
            chat_id, 
            f"üïí **–í–ù–ò–ú–ê–ù–ò–ï:** –ó–∞—è–≤–∫–∞ –Ω–∞ –º–∞—Ç—á #{match_id} –æ—Ç–º–µ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤.",
            reply_to_message_id=original_message_id
        )
        logging.info(f"–ó–∞—è–≤–∫–∞ #{match_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ —Ç–∞–π–º-–∞—É—Ç—É.")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Webhook (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ app.py) ---

async def start_webhook():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    db.init_db() 

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    if not scheduler.running:
        scheduler.start()
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler –∑–∞–ø—É—â–µ–Ω.")
        
    # –î–∏—Å–ø–µ—Ç—á–µ—Ä —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Polling (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) ---

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Long Polling (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω)
    global API_TOKEN, WEBHOOK_URL, TARGET_CHAT_ID
    # API_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù" 
    # WEBHOOK_URL = "http://localhost:8080/webhook" 

    await start_webhook() 
    await dp.start_polling(bot)

if __name__ == '__main__':
    # –≠—Ç–∞ —á–∞—Å—Ç—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Gunicorn, –Ω–æ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏.
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
